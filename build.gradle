buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'com.github.jk1.tcdeps' version '0.2'
}

ext.kotlinVersion = kotlinVersion
ext.ideaPath = file("$buildDir/download/idea")

// from https://teamcity.jetbrains.com/viewType.html?buildTypeId=bt410
ext.ideaBuildTypeId = "bt410"
ext.ideaBuildId = "183846.tcbuildid"

ext.ideaArtifactName = "ideaIC-139.SNAPSHOT.win"

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'com.github.jk1.tcdeps'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    dependencies {
        compile 'org.jetbrains:annotations:13.0'
    }
}

project(':metadata-model') {
    dependencies {
        compile 'com.thoughtworks.xstream:xstream:1.4.7'
    }
}

project(':metadata-crawler') {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile project(':metadata-model')

        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.commons:commons-lang3:3.3.2'
        compile 'net.htmlparser.jericho:jericho-html:3.3'
        compile 'org.jsoup:jsoup:1.8.1'
    }

    task collectMetadata(type: JavaExec, dependsOn: classes) {
        main = 'MetadataCrawlerMain'
        workingDir = rootDir
        systemProperty "file.encoding", "UTF-8"
        classpath sourceSets.main.runtimeClasspath
    }
}

repositories {
    ivy {
        url = "https://teamcity.jetbrains.com/guestAuth/repository/download"
        layout 'pattern', {
            artifact '[module]/[revision]/[artifact](.[ext])'
            ivy '[module]/[revision]/teamcity-ivy.xml'
        }
    }
}

configurations { idea_dep }

dependencies {
    compile project(':metadata-model')

    compile fileTree(dir: new File(ideaPath, "lib"), include: '*.jar')
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    idea_dep tc("${ideaBuildTypeId}:${ideaBuildId}:${ideaArtifactName}.zip")

    testCompile fileTree(dir: "${System.properties['java.home']}/../lib", include: '*tools.jar')
}

task extractIdea(type: Copy) {
    from zipTree(configurations.idea_dep.files.find { it.name.startsWith(ideaArtifactName) })
    into ideaPath
}

compileKotlin.dependsOn(extractIdea)
compileJava.dependsOn(extractIdea)

task runIdeaWithPlugin(type: JavaExec, dependsOn: assemble) {
    main = 'com.intellij.idea.Main'
    workingDir = rootDir

    jvmArgs "-ea", "-Xmx800m", "-XX:ReservedCodeCacheSize=64m", "-XX:MaxPermSize=250m", "-XX:+HeapDumpOnOutOfMemoryError"
    systemProperty "idea.is.internal", "true"
    systemProperty "idea.debug.mode", "true"
    systemProperty "idea.system.path", file("$buildDir/idea-home/system")
    systemProperty "idea.config.path", file("$buildDir/idea-home/config")
    systemProperty "plugin.path", file("$buildDir/distributions/CloudFormation.zip")

    classpath sourceSets.main.runtimeClasspath
    classpath fileTree(dir: "${System.properties['java.home']}/../lib", include: '*tools.jar')
}

task zip(type: Zip) {
    baseName 'CloudFormation'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    into('CloudFormation/lib') {
        from configurations.compile.files.findAll {
            // Filter out IntelliJ IDEA files
            File parent = it.getParentFile()
            while (parent != null) {
                if (parent.equals(ideaPath))
                    return false;
                parent = parent.getParentFile();
            }
            return true;
        }
        from configurations.runtime.artifacts.files
    }
}

artifacts {
    archives zip
}
